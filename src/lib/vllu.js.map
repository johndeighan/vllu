{
  "version": 3,
  "file": "vllu.js",
  "sourceRoot": "..\\..\\",
  "sources": [
    "src\\lib\\vllu.coffee"
  ],
  "names": [],
  "mappings": "AAAa;AAEb,OAAO,SAAP,MAAA,cAFa;;;;AAOb,OAAA,IAAO,MAAA,GAAS,CAAC,IAAD,EAAO,GAAP,CAAA,GAAA;EAEf,SAAS,CAAC,EAAV,CAAa,IAAb,EAAmB,GAAnB;AACA,SAAO;AAHQ,EAPH;;;;AAeb,OAAA,IAAO,KAAA,GAAQ,CAAC,GAAD,CAAA,GAAA;EAEd,MAAM,IAAI,KAAJ,CAAU,GAAV;AACN,SAAO;AAHO,EAfF;;;;AAuBb,OAAA,IAAO,MAAA,GAAS,CAAC,CAAD,CAAA,GAAA;AAEf,SAAO,eAAA,CAAgB,CAAhB;AAFQ,EAvBH;;;AA6Bb,OAAA,IAAO,KAAA,GAAQ;;AACf,OAAA,IAAO,OAAA,GAAU,CAAC,CAAD,CAAA,GAAA;SAAO,CAAC,CAAA,KAAK,KAAN,CAAA,IAAgB,CAAC,CAAA,KAAK,IAAN;AAAvB;;AACjB,OAAA,IAAO,UAAA,GAAa,CAAC,CAAD,CAAA,GAAA;SAAO,CAAC,CAAA,KAAK,KAAN,CAAA,IAAgB,CAAC,CAAA,KAAK,IAAN;AAAvB;;AACpB,OAAA,IAAO,QAAA,GAAW,CAAC,CAAD,CAAA,GAAA;SAAO,CAAC,OAAO,CAAP,KAAY,QAAb,CAAA,IAA0B,CAAC,CAAA,YAAa,MAAd;AAAjC;;AAClB,OAAA,IAAO,OAAA,GAAU,KAAK,CAAC;;AACvB,OAAA,IAAO,IAAA,GAAO,MAAM,CAAC,KAlCR;;;AAsCb,OAAA,IAAO,KAAA,GAAQ,SAAA,CAAC,CAAD,CAAA;AAEf,MAAA;EAAC,CAAA,GAAI;AACJ,SAAO,CAAA,GAAI,CAAX;IACC,MAAM;IACN,CAAA,IAAK;EAFN;AAHc,EAtCF;;;AAgDb,OAAA,IAAO,MAAA,GAAS,CAAC,CAAD,CAAA,GAAA;AAEhB,MAAA;EAAC,IAAG,UAAA,gDAAyB,CAAE,sBAA3B,CAAH;AACC,WAAO,MADR;;AAEA,SAAQ,CAAC,CAAC,WAAW,CAAC,IAAd,KAAsB;AAJf,EAhDH;;;AAwDb,OAAA,IAAO,OAAA,GAAU,CAAC,CAAD,CAAA,GAAA;EAEhB,IAAG,UAAA,CAAW,CAAX,CAAH;AACC,WAAO,KADR;;EAEA,IAAG,QAAA,CAAS,CAAT,CAAA,IAAe,CAAC,CAAC,KAAF,CAAQ,OAAR,CAAlB;AACC,WAAO,KADR;;EAEA,IAAG,OAAA,CAAQ,CAAR,CAAA,IAAc,CAAC,CAAC,CAAC,MAAF,KAAY,CAAb,CAAjB;AACC,WAAO,KADR;;EAEA,IAAG,MAAA,CAAO,CAAP,CAAA,IAAa,CAAC,IAAA,CAAK,CAAL,CAAO,CAAC,MAAR,KAAkB,CAAnB,CAAhB;AACC,WAAO,KADR;;AAEA,SAAO;AAVS,EAxDJ;;;AAsEb,OAAA,IAAO,QAAA,GAAW,CAAC,CAAD,CAAA,GAAA;SAAO,CAAE,OAAA,CAAQ,CAAR;AAAT,EAtEL;;;;;AA4Eb,OAAA,IAAO,IAAA,GAAO;EACb,IAAA,EAAM,GADO;EAEb,IAAA,EAAM,GAFO;EAGb,IAAA,EAAM,GAHO;EAIb,GAAA,EAAK;AAJQ;;AAMd,OAAA,IAAO,QAAA,GAAW;EACjB,IAAA,EAAM,GADW;EAEjB,IAAA,EAAM,GAFW;EAGjB,GAAA,EAAK;AAHY;;AAMlB,OAAA,IAAO,SAAA,GAAY,CAAC,GAAD,EAAM,WAAS,IAAf,EAAqB,WAAS,CAAA,CAA9B,CAAA,GAAA;AACnB,MAAA,EAAA,EAAA,CAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA;;;;EAIC,MAAA,CAAO,QAAA,CAAS,GAAT,CAAP,EAAsB,CAAA,cAAA,CAAA,CAAiB,OAAO,GAAxB,CAAA,CAAtB;EACA,IAAG,QAAA,CAAS,QAAT,CAAH;AACC,YAAO,QAAP;AAAA,WACM,KADN;QAEE,QAAA,GAAW;AADP;AADN,WAGM,SAHN;QAIE,QAAA,GAAW;AADP;AAHN;QAME,QAAA,GAAW,CAAA;AANb,KADD;;EAQA,MAAA,CAAO,MAAA,CAAO,QAAP,CAAP,EAAyB,CAAA,YAAA,CAAA,CAAe,QAAf,CAAA,CAAzB;EACA,MAAA,CAAO,MAAA,CAAO,QAAP,CAAP,EAAyB,CAAA,YAAA,CAAA,CAAe,QAAf,CAAA,CAAzB;EACA,CAAA,CAAC,MAAD,CAAA,GAAW,QAAX;EAEA,MAAA,GAAS;EACT,CAAA,GAAI;EACJ,KAAA,SAAA;IACC,IAAG,OAAA,CAAQ,MAAR,CAAH;MACC,IAAI,CAAA,KAAK,MAAT;QACC,MAAM,CAAC,IAAP,CAAY,GAAZ,EADD;OAAA,MAAA;QAGC,MAAM,CAAC,IAAP,CAAY,GAAZ,EAHD;OADD;;IAKA,MAAA,GAAS,QAAQ,CAAC,EAAD;IACjB,IAAG,OAAA,CAAQ,MAAR,CAAH;MACC,MAAM,CAAC,IAAP,CAAY,MAAZ,EADD;KAAA,MAAA;MAGC,MAAM,CAAC,IAAP,CAAY,EAAZ,EAHD;;IAIA,CAAA,IAAK;EAXN;EAYA,IAAI,MAAA,KAAU,GAAG,CAAC,MAAlB;IACC,MAAM,CAAC,IAAP,CAAY,GAAZ,EADD;;AAEA,SAAO,MAAM,CAAC,IAAP,CAAY,EAAZ;AAlCW,EAxFN;;;;;;AAiIb,OAAA,IAAO,WAAA,GAAc,CAAC,KAAD,CAAA,GAAA;AAEpB,SAAO,SAAA,CAAU,KAAV,EAAiB,SAAjB;AAFa,EAjIR;;;;;AAyIb,OAAA,IAAO,QAAA,GAAW,CAAC,KAAD,EAAQ,QAAM,CAAd,EAAiB,YAAU,IAA3B,CAAA,GAAA;AAElB,MAAA,MAAA,EAAA,SAAA,EAAA;EAAC,MAAA,GAAY,OAAA,CAAQ,KAAR,CAAH,GACR,KADQ,GAGR,KAAK,CAAC,KAAN,CAAY,IAAZ;EAED,SAAA;;AAAY;IAAA,KAAA,0CAAA;;mBACX,SAAS,CAAC,MAAV,CAAiB,KAAjB,CAAA,GAA0B;IADf,CAAA;;;EAGZ,IAAG,OAAA,CAAQ,KAAR,CAAH;AACC,WAAO,UADR;GAAA,MAAA;AAGC,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAHR;;AAViB,EAzIL;;;;;;AA6Jb,OAAA,IAAO,QAAA,GAAW,CAAC,KAAD,CAAA,GAAA;AAElB,MAAA,SAAA,EAAA,WAAA,EAAA,MAAA,EAAA,QAAA,EAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA;EAAC,MAAA,GAAY,OAAA,CAAQ,KAAR,CAAH,GACR,KADQ,GAGR,KAAK,CAAC,KAAN,CAAY,IAAZ;EAED,IAAI,MAAM,CAAC,MAAP,KAAiB,CAArB;AACC,WAAO,MADR;;EAGA,SAAA,GAAY,MAAM,CAAC,CAAD;EAClB,IAAG,QAAA,GAAW,SAAS,CAAC,KAAV,CAAgB,MAAhB,CAAd;IACC,WAAA,GAAc,QAAQ,CAAC,CAAD,EADvB;GAAA,MAAA;AAGC,WAAO,MAHR;;EAKA,GAAA,GAAM,WAAW,CAAC;EAClB,SAAA;;AAAY;IAAA,KAAA,0CAAA;;MACX,GAAA,GAAM,IAAI,CAAC,OAAL,CAAa,WAAb;MACN,IAAI,GAAA,KAAO,CAAX;qBACC,IAAI,CAAC,SAAL,CAAe,GAAf,GADD;OAAA,MAAA;qBAGC,MAHD;;IAFW,CAAA;;;EAOZ,IAAG,OAAA,CAAQ,KAAR,CAAH;AACC,WAAO,UADR;GAAA,MAAA;AAGC,WAAO,SAAS,CAAC,IAAV,CAAe,IAAf,EAHR;;AAxBiB",
  "sourcesContent": [
    "# vllu.coffee\r\n\r\nimport assertLib from 'node:assert'\r\n\r\n# ---------------------------------------------------------------------------\r\n# low-level version of assert()\r\n\r\nexport assert = (cond, msg) =>\r\n\r\n\tassertLib.ok cond, msg\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# low-level version of croak()\r\n\r\nexport croak = (msg) =>\r\n\r\n\tthrow new Error(msg)\r\n\treturn true\r\n\r\n# ---------------------------------------------------------------------------\r\n# deep clone\r\n\r\nexport dclone = (x) =>\r\n\r\n\treturn structuredClone(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport undef = undefined\r\nexport defined = (x) => (x != undef) && (x != null)\r\nexport notdefined = (x) => (x == undef) || (x == null)\r\nexport isString = (x) => (typeof x == 'string') || (x instanceof String)\r\nexport isArray = Array.isArray\r\nexport keys = Object.keys\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport range = (n) ->\r\n\r\n\ti = 0\r\n\twhile (i < n)\r\n\t\tyield i\r\n\t\ti += 1\r\n\treturn\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isHash = (x) =>\r\n\r\n\tif notdefined(x?.constructor?.name)\r\n\t\treturn false\r\n\treturn (x.constructor.name == 'Object')\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport isEmpty = (x) =>\r\n\r\n\tif notdefined(x)\r\n\t\treturn true\r\n\tif isString(x) && x.match(/^\\s*$/)\r\n\t\treturn true\r\n\tif isArray(x) && (x.length == 0)\r\n\t\treturn true\r\n\tif isHash(x) && (keys(x).length == 0)\r\n\t\treturn true\r\n\treturn false\r\n\r\n# ---------------------------------------------------------------------------\r\n\r\nexport nonEmpty = (x) => ! isEmpty(x)\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeStr - escape newlines, carriage return, TAB chars, etc.\r\n# --- NOTE: We can't use OL() inside here since it uses escapeStr()\r\n\r\nexport hEsc = {\r\n\t\"\\r\": '◄'\r\n\t\"\\n\": '▼'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\nexport hEscNoNL = {\r\n\t\"\\r\": '◄'\r\n\t\"\\t\": '→'\r\n\t\" \": '˳'\r\n\t}\r\n\r\nexport escapeStr = (str, hReplace=hEsc, hOptions={}) =>\r\n\t# --- hReplace can also be a string:\r\n\t#        'esc'     - escape space, newline, tab\r\n\t#        'escNoNL' - escape space, tab\r\n\r\n\tassert isString(str), \"not a string: #{typeof str}\"\r\n\tif isString(hReplace)\r\n\t\tswitch hReplace\r\n\t\t\twhen 'esc'\r\n\t\t\t\thReplace = hEsc\r\n\t\t\twhen 'escNoNL'\r\n\t\t\t\thReplace = hEscNoNL\r\n\t\t\telse\r\n\t\t\t\thReplace = {}\r\n\tassert isHash(hReplace), \"not a hash: #{hReplace}\"\r\n\tassert isHash(hOptions), \"not a hash: #{hOptions}\"\r\n\t{offset} = hOptions\r\n\r\n\tlParts = []\r\n\ti = 0\r\n\tfor ch from str\r\n\t\tif defined(offset)\r\n\t\t\tif (i == offset)\r\n\t\t\t\tlParts.push ':'\r\n\t\t\telse\r\n\t\t\t\tlParts.push ' '\r\n\t\tresult = hReplace[ch]\r\n\t\tif defined(result)\r\n\t\t\tlParts.push result\r\n\t\telse\r\n\t\t\tlParts.push ch\r\n\t\ti += 1\r\n\tif (offset == str.length)\r\n\t\tlParts.push ':'\r\n\treturn lParts.join('')\r\n\r\n# ---------------------------------------------------------------------------\r\n#   escapeBlock\r\n#      - remove carriage returns\r\n#      - escape spaces, TAB chars\r\n\r\nexport escapeBlock = (block) =>\r\n\r\n\treturn escapeStr(block, 'escNoNL')\r\n\r\n# ---------------------------------------------------------------------------\r\n#   indented\r\n#      - Indent each line in a block or array\r\n\r\nexport indented = (input, level=1, oneIndent=\"\\t\") =>\r\n\r\n\tlLines = if isArray(input)\r\n\t\tinput\r\n\telse\r\n\t\tinput.split(\"\\n\")\r\n\r\n\tlNewLines = for line in lLines\r\n\t\toneIndent.repeat(level) + line\r\n\r\n\tif isArray(input)\r\n\t\treturn lNewLines\r\n\telse\r\n\t\treturn lNewLines.join(\"\\n\")\r\n\r\n# ---------------------------------------------------------------------------\r\n#   undented\r\n#      - get indentation from first line,\r\n#        remove it from all lines\r\n\r\nexport undented = (input) =>\r\n\r\n\tlLines = if isArray(input)\r\n\t\tinput\r\n\telse\r\n\t\tinput.split(\"\\n\")\r\n\r\n\tif (lLines.length == 0)\r\n\t\treturn input\r\n\r\n\tfirstLine = lLines[0]\r\n\tif lMatches = firstLine.match(/^\\s+/)\r\n\t\tindentation = lMatches[0]\r\n\telse\r\n\t\treturn input\r\n\r\n\tlen = indentation.length\r\n\tlNewLines = for line in lLines\r\n\t\tpos = line.indexOf(indentation)\r\n\t\tif (pos == 0)\r\n\t\t\tline.substring(len)\r\n\t\telse\r\n\t\t\tline\r\n\r\n\tif isArray(input)\r\n\t\treturn lNewLines\r\n\telse\r\n\t\treturn lNewLines.join(\"\\n\")\r\n"
  ]
}